#
# Include this file in your .gitlab-ci.yml file to automate & integrate Checkmarx security scans.
#
# These variables can be overridden in your .gitlab-ci.yml file or as envionrment variables.
#
# Find more documentation at: https://checkmarx.com/resource/documents/en/34965-68722-checkmarx-one-gitlab-integration.html
#

variables:
    CX_BRANCH_NAME: "${CI_COMMIT_REF_NAME}"
    CX_PROJECT_NAME: "$CI_PROJECT_NAME"
    CX_BASE_URI: ${CX_BASE_URI}
    CX_TENANT: ${CX_TENANT}
    CX_CLIENT_ID: ${CX_CLIENT_ID}
    CX_CLIENT_SECRET: ${CX_CLIENT_SECRET}
    GITLAB_TOKEN: ${GITLAB_TOKEN}
    CX_LINK_SERVER_HOST: ${CX_LINK_SERVER_HOST}
    CX_ADDITIONAL_PARAMS: ""
    CX_FILE_FILTERS: ""
    CHECKMARX_DOCKER_IMAGE: "ast-cli"
    SECURITY_DASHBOARD: "false"
    SECURITY_DASHBOARD_ON_MR: "false"

checkmarx-scan:
  stage: test
  image:
    name: checkmarx/${CHECKMARX_DOCKER_IMAGE}
    entrypoint: ['']
  rules:
    - if: '$SECURITY_DASHBOARD != "true" && $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH'
  script:
    - >-
      /app/bin/cx
      scan create
      --project-name ${CX_PROJECT_NAME}
      --file-source '.'
      --scan-info-format 'json'
      --branch ${CX_BRANCH_NAME}
      --agent 'Gitlab' 
      --file-filter "${CX_FILE_FILTERS}"
      ${CX_ADDITIONAL_PARAMS}

mr-checkmarx-scan:
  stage: test
  rules:
    - if: '$SECURITY_DASHBOARD_ON_MR != "true" && $CI_PIPELINE_SOURCE == "merge_request_event"'
  image:
    name: checkmarx/${CHECKMARX_DOCKER_IMAGE}
    entrypoint: ['']
  script:
    - output_file=./output.log
    - >
      if [ -n "$CX_LINK_SERVER_HOST" ]; then
        echo "Using CX_LINK_SERVER_HOST"
        code_repo_url_param="--code-repository-url ${CX_LINK_SERVER_HOST}"
      elif [ "$CI_SERVER_HOST" != "gitlab.com" ]; then
        echo "Running on self-hosted GitLab instance"
        code_repo_url_param="--code-repository-url ${CI_SERVER_URL}"
      else
        echo "Running on GitLab.com (cloud mode)"
        code_repo_url_param=""
      fi
    - >-
      /app/bin/cx
      scan create
      --project-name ${CX_PROJECT_NAME}
      --file-source '.'
      --scan-info-format 'json'
      --branch ${CX_BRANCH_NAME}
      --agent 'Gitlab'
      --file-filter "${CX_FILE_FILTERS}"
      ${CX_ADDITIONAL_PARAMS} | tee -i $output_file
    - scanId=(`grep -E '"(ID)":"((\\"|[^"])*)"' $output_file | cut -d',' -f1 | cut -d':' -f2 | tr -d '"'`)
    - >-
      if [ -n "$scanId" ]; then
        echo "Creating MR decoration for scan ID:" $scanId
        /app/bin/cx utils pr gitlab --gitlab-project-id $CI_PROJECT_ID --mr-iid $CI_MERGE_REQUEST_IID --namespace $CI_PROJECT_NAMESPACE --repo-name $CI_PROJECT_NAME --scan-id $scanId --token $GITLAB_TOKEN $code_repo_url_param
      else
        echo "MR decoration not created."
      fi

mr-checkmarx-scan-security-dashboard:
  stage: test
  rules:
    - if: '$SECURITY_DASHBOARD_ON_MR == "true" && $CI_PIPELINE_SOURCE == "merge_request_event"'
  image:   
    name: checkmarx/${CHECKMARX_DOCKER_IMAGE}
    entrypoint: ['']
  script:
    - output_file=./output.log
    - >
      if [ -n "$CX_LINK_SERVER_HOST" ]; then
        echo "Using CX_LINK_SERVER_HOST"
        code_repo_url_param="--code-repository-url ${CX_LINK_SERVER_HOST}"
      elif [ "$CI_SERVER_HOST" != "gitlab.com" ]; then
        echo "Running on self-hosted GitLab instance"
        code_repo_url_param="--code-repository-url ${CI_SERVER_URL}"
      else
        echo "Running on GitLab.com (cloud mode)"
        code_repo_url_param=""
      fi
    - >-
      /app/bin/cx
      scan create
      --project-name ${CX_PROJECT_NAME}
      --file-source '.'
      --scan-info-format 'json'
      --branch ${CX_BRANCH_NAME}
      --agent 'Gitlab'
      --report-format gl-sast,gl-sca
      --file-filter "${CX_FILE_FILTERS}"
      ${CX_ADDITIONAL_PARAMS} | tee -i $output_file
    - scanId=(`grep -E '"(ID)":"((\\"|[^"])*)"' $output_file | cut -d',' -f1 | cut -d':' -f2 | tr -d '"'`)
    - >-
      if [ -n "$scanId" ]; then
        echo "Creating MR decoration for scan ID:" $scanId
        /app/bin/cx utils pr gitlab --gitlab-project-id $CI_PROJECT_ID --mr-iid $CI_MERGE_REQUEST_IID --namespace $CI_PROJECT_NAMESPACE --repo-name $CI_PROJECT_NAME --scan-id $scanId --token $GITLAB_TOKEN $code_repo_url_param
      else
        echo "MR decoration not created."
      fi
  artifacts:
    reports:
      sast: cx_result.gl-sast-report.json
      dependency_scanning: cx_result.gl-sca-report.json

checkmarx-scan-security-dashboard:
  stage: test
  rules:
    - if: '$SECURITY_DASHBOARD == "true" && $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH'
  image:   
    name: checkmarx/${CHECKMARX_DOCKER_IMAGE}
    entrypoint: ['']
  script:
    - >-
      /app/bin/cx
      scan create
      --project-name ${CX_PROJECT_NAME}
      --file-source '.'
      --scan-info-format 'json'
      --branch ${CX_BRANCH_NAME}
      --agent 'Gitlab'
      --report-format gl-sast,gl-sca
      --file-filter "${CX_FILE_FILTERS}"
      ${CX_ADDITIONAL_PARAMS}
  artifacts:
    reports:
      sast: cx_result.gl-sast-report.json
      dependency_scanning: cx_result.gl-sca-report.json
